super关键字
a..super 表示调用父类的方法
1).调用父类构造方法super
	* 子类调用父类无参构造时，super（）可写可不写
	* 子类调用有参构造时super(参数列表)，必须要写，告知编译器调用的是哪个父类有参构造
	* super和this在构造方法中不能同时存在，即子类不存在构造方法的互相调用


2）.super调用父类的普通方法
	* super.方法名（参数列表）
	* b.super表示调用父类属性（了解）



注意super和this的区别？

final关键字
	* 
2.1final修饰类
	* 当一个final关键字定义后，表示该类不允许被继承
	* 同时，该类中的所有方法都会被隐式加上final关键字（不包含成员变量）

String类以及8大数据类型包装类（Integer）都是final类-----保护性
此处却一点。。。。录屏

2.2final修饰方法
	* 当一个方法被final修饰表示该方法不允许被覆写。
	* final方法常用于模板方法---保护性



2.3final修饰属性
当属性被final修饰后表示该属性不可变并且该属性要在声明时初始化（声明时初始化，构造方法初始化，构造快初始化）
	* a.final修饰普通数数据类型变量（0.99）
	* 类中的常量一般用final+static,描述全局变量
	* 全局变量命名规范：多个单词全大写，且单词以_分隔


eg :public  static final int  MY_AGE=10;

b.  final修饰引用数据类型

3.多态
	* 同一类实例的相同方法在不同的情形下有不同的表现形式


3.1向上转型（0.9）
	* 作用：用于参数统一
	* 父类 父类引用=new 子类（）

Person per =new Student()

3.2向下转型（0.1）――需要强制转换
	* 作用：用于父类引用需要子类扩充方法时
	* 子类 子类引用=(子类)父类实例；
	* eg :Student  stu = (Student)per;



注意：要发生向下转型，必须先发生向上转型（爹认儿子，亲子鉴定）
（运行时异常）ClassCastException：发生在两个不能转的类型之间

Person  per =new  Student();
Student  stu = (Student)per;

（看new在哪就是 ）

引用instanceof类：表示该引用能否指向该类实例，返回boolean

per  intanceof Student;



4.内部类的定义以及使用
定义：在一个类中进行其他类结构的嵌套
public class person{

public Inter{

}
}

内部类不是继承

隐士继承要通过getter 和setter 访问

内部类为何存在？原因如下：
内部类的优点：
	* a.内部类与外部类可以互相访问彼此的私有域
	* b.内部类可以实现java的单继承局限
	* c.内部类可以对同一包中的其他类隐藏起来，仅供外部类使用（保护性）


缺点：结构复杂

4.2内部类与外部类的关系
	* a.内部类的创建需要外部类的实例化对象，在没有外部类对象之前无法创建内部类
	* b.内部类是一个相对独立的个体，与外部类不是is a的关系
	* c.内部类可以直接访问外部类的元素（包含私有域），但是外部类不可以之间访问内部类元素，需要通过内部类的引用j间接访问

4.3创建内部类的语法（在外部类之外）

4.3.1创建非静态类内部类
外部类。内部类 内部类引用 = new  外部类（）.new  内部类()

Outter.Inner  in = new Outter().new Inner();
Outer.this 表示外部类对象（一般都隐藏了）


4.3.2创建静态内部类

语法：外部类.内部类  内部类引用= new 外部类.内部类（）；
                                                                                          
eg:  Outter .Inner in = new  Outter.Intter();//直接产生内部类，没有 产生外部类

4.4内部类的分类                                                                                                                                                                                                                  
4.4.1  静态内部类--成员方法
	* a. 成员内部类不能存在任何任何static变量或方法。可以访问外部的静态域
	* b. 成员内部类需要依附外部类  new  Outter(). new Inner();
	* c.成员私有内部类可以用private封装，表示私有类，该内部类仅供外部类使用。（HashMap中的Entry内部类，ArrayList中的Node内部类）



内部类

4.4.2静态内部类--静态方法
	* a.静态内部类的创建不需要外部类，可以直接创建
	* b.静态内部类不可以访问外部类的任何非static域





4.4.3 方法内部类


4.4.4    匿名内部类



































