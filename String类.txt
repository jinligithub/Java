1.String类
1.1String的两种实例化方式
a.直接赋值（用的最多）
String str=“hello”
b。通过构造方法实例化
String str=new String（“hello”）；

1.2,字符串比较
String直接比较字符串的内容比较的是地址  

public boolean equals（Object anObject）----->区分大小写
public boolean equalsIgnoreCase（String antherString）----->不区分大小写
str.equals（str1）;

1.3字符串长 量是String类的匿名对象
小tips：在进行指定内容比较时，将指定内容（字符串常量）写前边，避免空指针NULLPointException
在JVM底层自动维护一个字符串对象池

str，equals（“”）-----》产生空指针
如果采用直接赋值的模式string类的实例化操作，对此对象讲自动保存到对象池中，如果继续采用直接赋值模式声明String对象，先去对象池找指定内容，如果有直接引用。若果没有开辟新的空间先将他保存到内存池供下次使用

比较入池没有：直接比较

String str=“hello”；
String str=new String（“hello”）；
System.out.println(str==str1);

字符串手工入池
public native String.intern();

1.5字符串常量不可变更
字符串一旦定义不可以改变。在堆上
若果进行字符串拼接，会产生垃圾内存

**1.5.1字符与字符串**
String<->char
1.字符数组char[]->String：String类的构造方法

public String(char[]  value1)
public String(char[]  value1,int offset, int count)


2.将字符串按照索引转为单个字符（索引从0开始）
String ->char
public char charAt(int index)

3.将字符串转为字符数组
String->char[]

public char[] toCharArray();

1.6字节与字符串
把字节数组转成字符串：
byte[]-->String

构造方法：public String(byte[]  byte

把字符串转为字节数组
String-->byte[]
*************public  byte[]  getbytes()***************
public byte[]  getbytes(String  charset)   :按照指定编码转为字节数组

字符数组和字符串转换不正确的原因：编解码不一致，数据不完整


1.7字符串比较
1.7.1不区分大小写的相等比较
public boolean equalsIgnoreCase（String antherString）----->不区分大小写

1.7.2比较字符串的关系
public int compareTo(String antherString)
只比较第一个不同的值得编码，将他们的差值返回来
返回值：
>0：表示本字符串大于目标字符串
=0：两种相等
<0：表示本字符串小于目标字符串


1.8字符串查找
从一个完整的字符串中判断指定内容是否存在

1.8.1判断指定字符串是否存在
public boolean contains(String str)
可以和if语句搭配

1.8.2判断是否以指定字符串开头
public boolean  startsWith(String prefix  )
public boolean  startsWith(String prefix int offset)

1.8.3判断字符串是否以自定字符串结尾
public Boolean endsWith(String suffix)

1.9字符串的替换
public String  replaceAll(String regex, String replacement)
将目标字符串全部替换
str.replaceAll("1","_"),将str中的*替换成_
1.20字符串拆分
public String[] split (String regex)：将字符串全部拆分
String
public String[] split(String regex , int limit )：将字符串拆分成
超过范围，该是多少是多少，
小于他的范围，该化几份就是几份

特殊字符转义后拆分：\\


eg：\\.

eg: zhangsan :20  |  wangwu :21
拆分两次：第一次按“|”，第二次按“：”


1.21字符串的截取***************
public String substring(int beginIndex)：从指定索引截取到结尾
public String substring[int beginIndex，intendIndex)：从指定索引截取部分内容(左闭右开)

1.22字符串的其他操作
去除字符串的左右空格，保留中间空格
public String trim（）;

字符串转大小写（全部大小写）
public  String  toUpperCase()  --->变大写
public  String  toLowerCase()  ---->变小写

让字符串首字母大写
eg：str.substring(0,1).toUpperCase()+str.substring(1);

判断字符串是否为空字符串（“”，部判断null）
public  boolean isEmpty()

判断字符串的完整写法
if(str==null||str.isEmpty)


2.两个sb(StringBuffer,StringBuilder)

2.1字符串拼接方法
public synchronized  StringBuffer append(各个数据类型)

2.2String类和StringBufr的相互转换
String->StringBuffer；
a.append()
b.调用String Buffer构造方法，new StringBuffer("")
StringBuffer -> String
调用StringBuffer.ToSting()

2.3字符串的常用操作
2.3.1字符串反转
reverse()：StringBuffer

2.3.2删除（修改）指定范围的数据
delete (int start,int end)     :StringBuffer
insert(int offset,各种数据类型)   ：StringBuffer

解释StringBuffer和StringBuilder，String的区别


1.String 内容不可变，两只sb可以改变
2.String Buffer（JDK1.0）,采用同步处理，线程安全，效率较低
3.StringBuilder(JDK1.5)，采用以部处理，线程不安全，效率较高，当在String对象进行“+”，编译时会将String类变为StringBuilder进行append()处理

3object类-----参数的最高统一化

3.1object类是JDk默认提供的一个类，Java中除了object类，所有类都存在继承关系，默认会继承object父类

3.3.2toString（）---取得对象信息
系统输出默认调用对象的toString()方法

object 类中的toString()只是简单输出当前所引用的类名以及对象地址，如果想在类中取得本属性信息，需要覆写toString()
3.4equals()---对象的比较
==：比较的值，字符串比较的地址
自己写一个equals方法

3.5object接收引用数据类型
object可以接收所有引用数据类型：数组，类，接口

接收char数组：[c@     类型@地址
int 数组：[I@

4.包装类---使用Object接收一切东东
包装类就是将基本数据类型封装到类中。

4.1包装类的分类
	* 
a.数值型包装类（Number的直接子类）：Byte,Double,Short,Long,Float,Integer（int）


会发生类型转换异常：NumberFormatException
	* 
b.对象型的包装类（Objectd的直接子类）：Boolean，Character（char）


Boolean：只有true才为true，
4.2装箱与拆箱************
装箱：将基本数据类型变为包装类对象，利用每个包装类提供的构造方法实现
拆箱：将包装类中的包装的基本数据类型取出，利用XXValue()

对于Ingetre var =?  在[-128.127]的赋值，Ingeter对象在常量池产生，会覆写已有对象；这个区间外的所有数据。都在对上产生，不会复用已有对象



Integer i = new Integer(10);  手工装箱
int result = i.intValue();    手工拆箱

Integer i=10;
Integer i=10;
i1=i2;  //ture
Integer i=200;
Integer i=200;
i3=i4;  //false

阿里编码规范：int or Ingeter
	* 
1.【强制】所有的POJO类（简单JAVA类，类中只有成员变量，构造方法，getter/etter）属性必须使用包装类
	* 
2.【强制】RPC方法（远程方法调用）返回值和参数必须使用包装类
	* 
3.【推荐】所有的局部变量使用基本类型


@Data：简单Java类

4.3包装类与字符串的转换
4.3.1String -> 基本数据类型
包装类.parseXX(str)
String -> int  :   Integer.parseInt(str)


4.3.2  基本数据类型   -> String
a.“”+基本数据类型
b.String 类提供的静态方法valueOf（基本数据类型）---->推荐，不产生垃圾空间

-p：反编译
Alt+Insert：setter/getter生成的快捷键