Java数组：一组相关类型变量集合，可以通过统一的方式来操作（引用数据类型）
1.数组的动态初始化
	* 数据类型[]   数据名称  =  new  数据类型[长度]

eg：  int [] data=new int [5];

	* a.数组元素访问通过索引完成，下标默认从0开始。如果索引下标超过数组长度，会抛出数组越界异常（运行时异常（正常编译））
	* b.动态初始化之后的数组，每个数组都有其默认值
	* c.查看数组长度数组名称.length

数组遍历推荐使用 for-each循环(只限于读取数据，修改数组内容还是要用原来的for循环)

for(int  temp :  data )

2.数组的引用传递

//data数组引用

引用（一级指针）：堆内存的别名，4字节，在栈上分配空间。指向一块堆内存的地址。

3.数组的静态初始化
a.简化格式（不建议用）： 数组名称 = （值1，值2.......）

int[] a1= {1,2,3,4,5,6,7};
b.完全格式： 数组名称[]  = new  数组类型[] (值1，值2.......)

int [] data= new  int[1,2,3];
数组长度：在数值定义后固定，不可变。

默认值：是其类型的默认值，引用类型默认值NULL

匿名数组 ：用一次就被回收了

数组最大的缺陷：长度固定（存在越界问题）  产生了java util 框架

4.二维数组

动态初始化
数据类型[][] 数组名称 = new 数据类型[行个数][列个数]

静态初始化
	* 数据类型[][] 数组名称 = new
	* 数据类型[][]  {{第一行的值......},{第二行的值.....}}

数组与方法互操作
	* a.方法接收数组
	* b.方法返回数组
	* c.方法修改数组

java对数组的支持
1.排序

java.util.Arrays.sort(数组名)；
可以排8大基本数据类型，默认升序排序，内部采用双轴快素排序

2.数组的部分拷贝

System.arraycopy(原数组名称，原数组开始点，目标数组名称，目标数组开始点，拷贝长度)；

3.数组全拷贝

java.util.Arrays.copyOf(原数组名称，新数组长度)：int[]            返回的时新数组
java类集的动态扩容采用此方法


