抽象类的定义与使用
定义：抽象类只是比普通类多了一些抽象方法
抽象方法：只声明而未实现的方法（没有具体方法），抽象方法要求使用abstract关键字来定义，并且抽象方法所在的类也一定要使用abstract关键字来定义，表示抽象类

只声明未实现的方法：本地方法，抽象方法

1.抽象类的使用原则
a.使用抽象类必须有子类（final 和abstract不能同时出现）
b.抽象类的子类必须覆写抽象类的所有抽象方法(private和abstract不能同时出现)
c.抽象类无法直接创建实例化对象，需要通过子类向上转型为实例化


2.抽象类的相关规定
1.2.1抽象类一定存在各种方法。子类也一定遵循对象实例化流程，先调用父类构造再调用子类构造

1.2.2抽象类可以没有任何抽象方法，但此时任然不能创建实例化对象

1.2.3  final和prvate不能同时和abstract同时出现

1.2.4 关于内部抽象类：
子类只需要覆写外部抽象类中的直接抽象方法，内部出现类的抽象方法可以部覆写
子类覆写内部类的内部抽象类，在子类里写一个内部类区继承内部类的抽象类，再去覆写要调用的内部类


2.模板设计模式

设计模式：解耦，第三方（高内聚，低耦合）

开闭原则（OCP）：对一个软件实体如类，模块或函数应该扩展开放，对修改关闭，

2.2.1模板（模板方法）设计模式：基于抽象类
在一个方法种定义一个 算法骨架，而将一些步骤延迟到子类中，模板模式可以使得子类在不改变算法的情况下，重新定义算法种的某些步骤
final 方法选择性的修改

接口的定义以及使用

抽象类有单继承局限
接口优先原则：在一个 操作类既可以使用抽象类又可以使用接口的时候，有限考虑使用接口。

3.1接口定义（JDK8以前）
接口就是抽象方法以及全局常量的集合（纯粹版的抽象类），interface关键字定义接口

命名规范：接口使用 I 开头

子类要想使用接口，implements实现接口，一个接口可以同时实现多个接口（避免JAVA单继承局限）

子类的命名规范：接口名为IMyInterface，子类实现此接口命名为MyInterfaceImp

父接口间的相互转换：前提是两个父接口拥有共同实现的子类

３.２.１接口中只允许public权限（不管是常量还是方法，都是public）

类默认权限为default，在接口中默认权限为public，抽象类中public和abstract不可以省略

不管是方法还是常量，即便不写权限修饰符，都是public权限，

阿里编码规约：接口中不要出现人修饰符号，public也不要


３.２.２当子类既需要实现接口又需要继承抽象类时，请先使用extends继承一个抽象类，而后使用implements实现多个接口

３.２.３一个抽象类可以使用implements实现多个接口，接口不能继承抽象类。

３.２.４接口可以使用extends继承多个父接口（接口多继承）

３.２.５子类实现接口时必须要把接口中的方法都要实现；

抽象类：　is　ａ
接口：

３.３接口应用
ａ．定义操作标准
ｂ．表示能力
ｃ．（了解）分布式开发之中暴露远程服务的方法

4.工厂设计模式（重点）
将客户端的ｎｅｗ操作解耦到第三方

４．１简单工厂
抽象的产品类（接口）――Competer
多具产品类---MACBook，SufaceBook
一个工厂（new 操作在此工厂中进行）--客户端通过工厂类获取实例

优点：简单
缺点：不符合半开半闭原则
应用场景：产品个数少，没有家族，



4.2工厂方法模式--横向扩展方便
定义一个用来创建对象的接口，让子类决定实例化哪一类。
针对每个产品（产品族）提供一个工厂类，客户端需要判断使用哪一个工厂


特点：
一个抽象产品类
多个具体产品类
一个抽象工厂（针对抽象产品类）
多个具体产工厂（每个产品家族拥有自己的工厂）


应用场景：每个产品线有自己的家族，家族下有很多兄弟，有自己的产品线


4.3抽象工厂（了解）--多个产品线混合










