Ljava类集（数据结构--多线程）--动态数组（解决数组固定，当元素个数达到最大值时，动态增加容量）

java.util


考题：

list接口：
1.ArrayList与Vector区别：
源码，
多线程，

2.ArrayList线程不安全的List集合，是否了解JUC包下的线程安全。

Set：
1.set集合与map集合的关系
2.hashCode ,equals方法关系
3.Comparable，compartor接口关系

Map：
1.对比HashMap，Hashtable关系
2.是否了解concurrentHashMAp 以及实现原理。

Set接口：不允许数据重复（Set接口就是value值相同的Map集合，先有Map才有Set）
Set接口：没有扩充的方法

Set接口常用子类：
HashSet（无序存储）
1.底层使用哈希表+红黑树
2.允许存放null，无序存放


TreeSet（有序存储）-TreeMap
1.底层使用红黑树
2.不允许空值出现
3.自定义类想要保存到TreeSet中，要么实现Comparable接口，要么向TreeSet传入比较器（Comparator接口）



1.java类集产生--JDK1.2

动态数组：解决数组固定长度问题。

1.2  Collection接口--单个对象保存的最顶层父接口。

collection接口机器子接口，在每次进行数据操作时只能够对单个对象进行处理。
泛型的产生是为了类集服务的。
public  interface Collection<E> extends  Iterable<E>

Iterable<E>:迭代器接口（就是为了遍历集合）
Iterator<T>：取得集合的迭代器，JDK之前直接写在Collection接口中）
Collection接口提供的方法：
add（  T   t）:向类集添加元素
iterator()：取得类集的迭代器。

Collection接口只定义了存储数据的标准，但是无法区分存储类型。因此在实际中我们往往使用两个子接口List（允许数据重复），set（不允许数据重复）。一般不直接使用Collection接口。



2.List接口（80%）
在进行单个集合处理时，优先考虑List接口 。

在List接口中，拓展了两个重要方法（List接口独有）

public E get （int  index）：根据索引下标取得数据
public E set  （int index，E element）：根据索引下标更新数据，返回修改前的数据。


List有三个重要子类：ArrayList（90%），Vector，LinkedList
这三个子类使用上没有任何区别。

List接口要想保存自定义类的对象，该类必须覆写equals（）来使用contains（），remove（）等方法

**********************ArrayList，Vector，LinkedList的区别******************

1.ArrayList，Vector的区别：

1.出现版本：
ArrayList  JDK1.2
Vector  JDK1.0 （出现在List，Collection接口之前）

2.初始化策略区别
Vector在无参构造执行后将对象数组大小初始化为10.
ArrayList采用懒加载策略，在构造方法阶段并不初始化对象数组，在第一次添加元素时才初始化对象数组大小为10

3.扩容策略
ArrayList扩容时，新数组大小变为原数组的1.5倍。
Vector扩容时，新数组大小变为原数组的2倍。

4.线程安全性
ArrayList采用异步处理，线程不安全，效率较高
Vector采用在方法上加锁，线程安全，效率较低。（即使要使用线程安全的List，也不用Vector）

5.遍历
Vector支持较老的迭代器Enumeration，
ArrayList不支持。

2.ArrayList，Vector的共同点：

底层均使用数组实现

3.ArrayList和LinkedList

LinkedList底层使用双向链表实现
ArrayList底层使用数组实现


Set接口不允许数据重复（Set接口就是value值相同的Map集合，先有Map才有Set）。
Set接口没有扩充方法

Set接口的常用子类

HashSet（无语存储）---HashMap
1.底层使用哈希表+红黑树
2.允许存放null，无序存储

TreeSet（有序存储）：--TreeMap
两个接口Comparable，Compartor
1.底层使用红黑树
2.不允许出现空值，有序存储。
3.自定义类要想保存到TreeSet中，要么实现Comparable接口，要么向TreeSet中传入一个比较器（Compartor接口）

Compartor接口与comparable接口的区别：‘’
在java中，若想实现自定义类的比较，提供了以下两个接口。

java.lang.Comparable接口（内部比较器）
若一个类实现了Comparable接口，就意味着该类支持排序。
存放该类的Conllection或数组，可以直接通过Collections.sort()  或Arrays.sort()进行排序。

实现了Comparable接口的类可以直接存放在TreeSet或TreeMap中

public int  compareTo （T  o  ）

返回值的三种情况：
返回正数：表示当前对象大于目标对象
返回0：表示当前对象等于目标对象
返回负数：表示当前对象小于目标对象


Compartor（外部排序结构）
定义：若要控制某个自定义类的顺序，而该类本身不支持排序（类本身没有实现Compartor接口）。我们可以建立一个该类的“比较器”来进行排序。比较器实现Compartor接口即可。

“比较器”：实现了Compartor接口的类作为比较器，通过比较器来进行类的排序。


int compare（T  o1,  T    o2）;
返回值与compare返回值一样。

返回正数表示：o1>o2
返回0表示：o1=o2
返回小数表示：o1<o2



实现了Compartor接口进行第三方排序-策略模式，此方法更加灵活，可以轻松改变策略进行第三方的排序算法。


Compartor接口与Compartor接口的关系：


Comparable是排序接口，若一个 类实现
0了Comparable接口，意味着该类支持排序，是一个内部就比较器（自己和别人比）

Compartor接口时比较器接口，本身不支持排序，专门有若干个第三方的比较器（实现了Compartor接口的类）来进行类的排序，是一个外部比较器（策略模式）


重复元素的比较：
TreeSet和TreeMap依靠Comparator或Comparable接口来区分重复元素。

自定义类要想保存在TreeSet和TreeMap中：
1.要么该类直接实现Comparable接口，覆写compareTo方法
2.要么实现一个比较器传入TreeSet或TreeMap来进行外部比较。

返回0认为元素是重复的

而HashSet与HashMap并不依赖比较接口comparable或comparator。此时要想区分自定义元素是否重复，需要同时覆写equals与HashCode方法


为什么hashset要同时覆写这两个方法？

因为在list里只覆写equals方法就可以区分元素是否重复，
因为底层数据结构不一样，list底层是单个元素，她是线性的结构，都在一行保存着，就是一个链表，所有元素都在这这个链表上放着。
而Hashset或者HashMap,底层是哈希表+红黑树。如果有两个元素的值相同，所以他们的哈希码也相同，哈希码确定这个元素应该放在哪个桶下边，但是存放时会检查元素是否与重复
先调用HashCode计算出哈希码，计算出对象存放的数据桶，然后调用equals比较桶里元素是否相等，若相等，则不在存放元素。如果equals返回false，则在相同的桶之后使用链表将元素连接起来。




Hash Code：求哈希码

equals相等的两个对象，HashCode一定保证相等。HashCode相同的两个对象，equals不一定相等。

首先覆写equals方法来判断两个元素的内容是否相等。

覆写equals方法的原则：

自返性：对于任何非空引用值,x，x.equals（x）都返回true
对称性：对于任何非空X,Y，当且仅当x.equals(y)返回true，y.equals(x)也返回true
传递性：对于任何非空x,y,z,如果x.equals(y)返回true，y.equals(z)返回true，一定有x.equlas(z)返回true。
一致性：对于任何非空x,y，若X与Y中的属性没有发生变化，则多次调用x.equals(y)始终返回true或false。
非空性：对于任何非空引用x.equals(null)，一定返回false。
equals比较的是地址

HashMap 和HashSet如何存放数据：(哈希表的存放原理)

先调用HashCode 计算出对象Hash码决定存放的数据桶，然后使用equals来比较元素是否相等。若相等，则不再放置数据元素。若equals返回false，则在相同的桶之后，使用链表将若干元素链接起来。


Object类提供的hashcode的方法默认使用对象的地址进行hash。

如何证明两个对象真正的相等

若两个对象equals方法返回true，他们的hashCode必然要保持相等。但是两个对象的hashCode相等，equals不一定相等。当且仅当equals与hashCode方法均返回true，才默认两个对象真正的相等。


为什么两个对象的equals相等HashCode却不一定相等

hash是一个函数，算出来是一个值。

下边两个虽然值一样，但是他们不是同一个对象。所以HashCode相等。equals不一定相等。
但是equals比较的是值，所以HashCode也一定相等
name  age
28        2
2         28
“张三”   20
“张三”   20


hash表的意义，为何要分桶来存放元素？

优化了查找次数




四，集合输出（迭代器输出）--Iterator接口
迭代器：为了遍历集合而生。--迭代器模式



4.1迭代输出Iterator--顺序的，只能从前向后输出（Collection接口提供）

Iterator接口两个核心方法：
boolean  hashNext（）；  判断是否还有元素
E  next（）；  取得下一个元素

调用Collection集合子类的Iterator方法取得内置的迭代器，使用以下输出格式
while （iterator.hashNext（））{
      System.out.println(iterator.next());
}

4.2双向迭代输出ListIterator
除了hashNext与next方法外

hashPrevious（）；判断是否有上一个元素
previous：取得上一个元素

要想使用从后向前遍历，首先至少要从前向后遍历一次才可使用。

4.3Enumeration（JDK1.0）枚举输出---只有Vector支持
hasMoreElements（）：判断是否有下一个元素
nextElements（）：取得下一个元素

4.4for-each输出（所有子类都满足）
能使用foreach输出的本质在各个集合都内置了迭代器



fail-fast机制：
ConCurrentModificationException发生在Collection集合使用迭代器遍历时，是因为在集合遍历时00修改集合内容报错，而如果使用Iterator迭代器的remove（）不会出现此错误。

原因是：
final  void  checkForComodification(){
         if（modCount !=expectedModCount）
              throw new ConcurrentModificationException();
}

Collection集合中的modCount表示当前集合修改的次数(意义：如果在一个并发的情况下，如果集合已经添加完元素，用户一应正在遍历了，如果这个时候修改内容，就要有一个东西告诉用户这个值已经修改了，它保证了用户不会脏读数据（下载看到的数据不是最新的），modCount保证了用户看到的值一定是最新的值)

expected*ModCount是迭代器中记录当前集合的修改次数。取得当前集合迭代器时（及调用list.Iterator（）方法时），expectedModCount=modCount，换言之，迭代器就是当前集合的一个副本。


在取得iterator迭代器的时候，就给expectedModCount赋值了，此时执行expectedModCount=modCount




快速失败策略保证了所有用户在进行迭代遍历集合时，拿到的数据一定是最新的数据（避免“脏读”产生）



fail-safe：不产生ConcurrentModificationException异常，juc包下的线程安全集合（copyOnWriteArrayList）


总结：以后在迭代器遍历结合时，不要修改集合内容



为什么调用List.remove（）会报错，但Iterator.remove()不会报错？
2012,12.22.17：17

5.Map集合


Map接口是java保存二元偶对象（键值对）的最顶层接口。

public  interface  Map<k，v>
key值唯一，通过一个Key值可以找到唯一一个value值。


Map中的核心方法

public  V  put  ( k  key,  V  value )：向Map中添加数据
public   V  get（ K key）：根据指定的key值取得相应的value值，若没有测value值，返回null。

public  Set<Map.Entry<K,V>> entrySet()：将Map集合变为Set集合

public Set<K>  KeySet()：返回所有key值集合，key不能重复

public Collection<V>  values()：返回所有value值，value可以重复。

Map接口有如下四个常用子类：
HashMap（使用频率最高--必考），TreeMap，Hashtable,ConcurrentHashMap

Map接口的使用


HashMap和Hashtable的比较


HashMap--类比HashSet
1.允许key和value为null，且key值只有一个为null，value可以有多个为null。
2.JDK1.2产生
3.异步处理，效率高，线程不安全
4.底层哈希表+红黑树（JDK8）

Hashtable
1.key和value均不允许为null
2.JDK1.0产生
3.使用方法上加锁，效率低，线程安全
4.底层哈希表


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


1**************.Map集合使用迭代器（Iterator)输出*********

Set<Map,Entry<K，V>>entrySet()：将Map集合转为Set集合



2.栈与队列

栈：先进后出
函数栈帧：浏览器的标签页的后退，安卓Activity的后退，编辑器的撤销


队列：先进先出
消息队列：kakfa


Queue接口：LinkedList
Queue<Integer> queue= new LinkedLis

入队列：add()
出队列：poll()
返回对头元素，不出队：peek（）

3.资源文件操作（properties属性文件）
资源文件内容都是K-V格式，并且无论是Key，value都是String类型

设置属性：
setProperty(String key,String value)
取得属性：
getProperty(String  key )  : String
若没有指定Key，返回Null
getProperty(String  key,  String defaultValue):
若没有指定key值，返回默认值


将资源文件输入输出到目标终端：
输出到目标终端store（OutputStream  out, String  Comment）;
从目标终端中读取数据load(InputSream  in);

4.Collections工具类
Array-Arrays
Executor-Exceutors
Collection-Collections

集合反转，排序

1.将线程不安全集合包装为线程安全集合（不推荐）
在add,remove等修改方法中使用同步代码块保证线程安全，效率较低。要使用线程安全集合，推荐使用juc包下的并发集合类（ConcurrentHashMap，CopyOnWriteArrayList）
2.集合排序
collections.sort(集合名称)
3.集合反转
collections.reverse(集合名称)


5.Stream数据流（JDK1.8新增）：Collection接口

核心方法：取得Stream流
Stream<E>  Stream()

"：："：方法引用

常用方法：
forEach：集合输出
filter方法：数据过滤
max/min：取得最大最小值

Map/Reduce模型
map()：数据的前期处理操作

reduce()：数据的后期收集















