3.单例模式（****）
单例模式：一个类只允许产生一个实例化对象
就写饿汉式单例，懒汉式单例存在线程安全问题（双重加锁单例模式）



如何限制Singleton产生对象个数？
饿汉式单例：先new 为敬


class Singleton{
private static final Singleton SINGLETON=new Singleton();//2。在这里实例化一个对象
private Singleton(){}//1.先写一个私有的构造方法
public static Singleton getSingleton(){//3。get 方法把它返回
return SINGLETON;
}
}

public class Test {
public static void main(String[] args) {
Singleton singleton1=Singleton.getSingleton();
System.out.println(singleton1);
Singleton singleton2=Singleton.getSingleton();
System.out.println(singleton2);
}
}

懒汉式单例：用时在new


//懒汉式单例
class Singleton{
private static Singleton SINGLETON;//2。在这里实例化一个对象,加static 因为下边要调用
private Singleton(){}//1.先写一个私有的构造方法
public static Singleton getSingleton(){//3。get 方法把它返回
if(SINGLETON==null)
{
SINGLETON=new Singleton();
}
return SINGLETON;
}
}

4.多里模式--有限个树对象
多例模式只是比单例模式多了一些内部实例化对象

无论是单例还是多例：
	* 
1.私有化构造方法，外边无法产生对象
	* 
2.类内部一定有一个静态方法返回有限个数对象
	* 
3.一个静态方法把它返回







