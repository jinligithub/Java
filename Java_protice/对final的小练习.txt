//final修饰的类无法被继承，而且该类里的方法都被隐式的加上final关键字9(不包含成员变量)
final class Person{
    public int age=5;
}
class Student extends Person{
    public int age=10;
}
public class Super{
    public static void main(String[] arhs){
        System.out.println(new Student().age);//输出10，因为new 后边为Student，它对上边的属性进行了覆写
    }
}
//final修饰的方法部允许被覆写
final class Person{
    final public void fun(){}
}
class Student extends Person{
    public void fun(){}
}
public class Super{
    public static void main(String[] arhs){
        new Student();//输出10，因为new 后边为Student，它对上边的属性进行了覆写
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//final 修饰基本数据类型，属性被final修饰后改属性的值不可变，且要在声明时初始化
final class Person{
    //声明式初始化
    public final int a=5;
    //构造方法初始
    public final int a;

    public Person(){
        a=5;
    }
    //构造快初始
    public final int a;
{
    a=5;
}

}
class Student extends Person{
}
public class Super{
    public static void main(String[] arhs){
        new Student();//输出10，因为new 后边为Student，它对上边的属性进行了覆写
    }
}

////////////////////////////////////////////
class Person{
    public final int age1=5;//当对象产生时才给分配值（满。堆区）
    public static final int age2=5;//在类加载时 会进行编译器的优化，因为在类加载时他的值已经不能在改变了（块，静态全局区）
}
class Student extends Person{
    public int age=10;
}
public class Super{
    public static void main(String[] arhs){
        System.out.println(new Student().age);//输出10，因为new 后边为Student，它对上边的属性进行了覆写
    }
}


////////////////////////////////////////////////////////////////////////////
final
class Person{
    public String name="test";
    public int age=5;
}
class Student extends Person{
}
public class Super{
    public static void main(String[] arhs){
        final Person p=new Person();
        p.name="张三";
        p.age=16;
        System.out.println(p.name);//他们存在堆上可以变
        System.out.println(p.age);


        p=new Person();//把p的地址给了一块新空间是错的，因为当一个引用数据类型用final修饰表示栈里面存的堆内存的地址不可变
    }
}
