3.枚举
Java中枚举对象使用enum关键字定义枚举。
枚举就是一种多例设计模式。
语法：

举例：
enum Color {
    RED,GREEN,BLUE
 } 

3.1--enum 类    ---引用数据类型（枚举类）
JDK1.5新增的enum 枚举结构不是新的结构，使用枚举定义的枚举本质上是一个类，默认继承Java.lang.Enum类
没有输出地址。因为覆写了toString方法
取得枚举名称：public final String name()
取得枚举编号：public final int ordinal（）
取得所有枚举对象：枚举类.values():Enum[]
enum编号默认从0开始

3.2枚举中定义其他结构，枚举对象必须放在首行声明。
用private修饰构造方法，防止他被修改，因为他为多例模式

枚举还可以实现接口，此时枚举中的每个对象都称为接口对象。

4.注解(Annotion）
JDK1.5自带的三大注解
4.1准确覆写@Override
检查当前类中的覆写方法与父类定义的同名方法是否相同，如果有任何一个地方不一样，编译报错。
4.2过期处理@Deprecate
原有类或者方法在旧版本没有问题，但是新版本不推荐使用，可以加上@deprecate注释，明确表示不建议用户使用此类或者方法。

4.3压制警告告(@SuppressWarnings)
当某些操作可能产生问题时会出现警告信息，警告信息不是异常

注解用@interface定义

5.JDK1.8新特性
JDK开始接口允许出现以下两种方法
5.1可以使用default来定义 普通方法，需要通过对象 调用（default不可省，省了为抽象方法），接口中的普通方法用default修饰
5.2可以使用static来定义静态方法，通过接口名就可以调用

子类可以继承父类的静态方法

6.lambda表达式
要想使用函数式编程有一个前提条：接口必须只有一个方法，如果接口中存在两个以上的方法，无法使用函数式编程语法！

如果现在某 个接口就是为了函数式编程而生的，最好在定义时就让其只能够定义一个方法，所以有了一个新的注解：@FunctionalInterface

lambda表达式语法：
单行无返回值，单行有返回值
()-> ...方法代码；

多行有返回值
（）-> {
.....
.....
   return 返回值语句 ；
}；

interface IMath{
    int  add(int a,int b)
}
IMath math=(p1,p2)->p1+p2;
math.add(10,20);

Haskell
scala
koltin

